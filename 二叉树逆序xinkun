public class MainTest {

    public static void main(String[] args) {
        try {
            MainTest mainTest = new MainTest();
            System.out.println(mainTest.Solve());
        } catch (Exception e) {
            System.out.println("创建实例失败 " + e.toString());
        }
    }
    
    public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) {
          val = x;
          left = null;
          right = null;
       }
    }
    
    
    public int Find(int x,int len,int[] num){  //二分查找  如果找不到则返回改数应该插入的位置
        int low = 0;
        int heigh = len-1;
        while(low<=heigh){
            int mid = (low+heigh)>>1;
            if(num[mid] > x) heigh = mid - 1;
            if(num[mid] < x) low = mid + 1;
            if(num[mid]  == x) return mid;
        }
        return low;
    }

    public void Reverse(TreeNode head){  //中序遍历 交换左右子树
        if(head == null) return ;
        Reverse(head.left);
        Reverse(head.right);
        TreeNode temp = head.left;
        head.left = head.right;
        head.right = temp;
    }
    
    public int Solve() {
        TreeNode node1 = new TreeNode(1);
        TreeNode node2 = new TreeNode(2);
        TreeNode node3 = new TreeNode(3);
        TreeNode node4 = new TreeNode(4);
        TreeNode node5 = new TreeNode(5);
        TreeNode node6 = new TreeNode(6);
        TreeNode node7 = new TreeNode(7);
        TreeNode node8 = new TreeNode(8);
        TreeNode node9 = new TreeNode(9);
        node1.left = node2;
        node1.right = node3;
        node2.left = node4;
        node2.right = node5;
        node3.left = node6;
        node3.right = node7;
        node7.left = node8;
        node7.right = node9;
        printTree(node1);
        Reverse(node1);
        printTree(node1);
        return 0;
    }

    public void printTree(TreeNode head){    //层序遍历打印二叉树
        Queue<TreeNode> Q = new LinkedList<>();
        Q.offer(head);
        while(!Q.isEmpty()){
            TreeNode now = Q.peek();
            Q.poll();
            System.out.println(now.val);
            if(now.left != null) Q.offer(now.left);
            if(now.right != null) Q.offer(now.right);
        }
    }

}
